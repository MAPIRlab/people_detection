#!/usr/bin/env python

import rospy
import sys
##from std_msgs.msg import Int16
import numpy as np
from openpose_pkg.msg import *
from geometry_msgs.msg import Pose
import random
from tf.transformations import quaternion_from_euler
from math import pi
from visualization_msgs.msg import MarkerArray, Marker

class GenUsers:

    def __init__(self):
        rospy.init_node('user_generator_node')

        self._topic_users_3d = rospy.get_param('~ROSTopics/users_3d_topic', '/empty_topic')
        self._topic_marker = rospy.get_param('~ROSTopics/marker_users_topic', '/markers_users') 

        self._pub_people = rospy.Publisher(self._topic_users_3d, User3DArray, queue_size = 100)
        self._pub_marker = rospy.Publisher(self._topic_marker, MarkerArray, queue_size = 10) 

        self._sub = rospy.Subscriber("appro_user_markers", MarkerArray, self.callback_users)
        self._publish_flag = True

    def callback_users(self, data):
        self._publish_flag = True

    def loop_converter(self):
        r = rospy.Rate(1)
        self._publish_flag = True
        while (not rospy.is_shutdown()):
            if True:
                self._publish_flag = False
                userarray_msg = User3DArray()
                user_msg = User3D()
                marker_msg_body = MarkerArray()
                ## fill the msg
                userarray_msg.header.frame_id = "camera_down_rgb_frame"
                userarray_msg.header.stamp = rospy.Time.now()

                ## fil user
                user_msg.name = "paco"
                user_msg.valid_orientation = 1
                user_msg.certainty = 0.9

                pose_user = Pose()

                n = random.random()
                angle = 0
                if n < 0.25:
                    angle = float(0.)
                elif n < 0.5:
                    angle = float(pi)
                elif n < 0.75:
                    angle = float(pi / 2.0)
                else:
                    angle = float (-pi *0.5)

                H = np.array([0., float(angle), 0.])
                QH = quaternion_from_euler(*H)
                pose_user.orientation.x = QH[0]
                pose_user.orientation.y = QH[1]
                pose_user.orientation.z = QH[2]
                pose_user.orientation.w = QH[3]
                ## random pose

                m = random.uniform(0.0, 4.0) ## user between 0 and 4 meters
                p = random.uniform(0.0, 4.0)
                pose_user.position.x = m
                pose_user.position.y = p
                pose_user.position.z = 0.0

                user_msg.pose_3D = pose_user

                userarray_msg.users.append(user_msg)

                ## markers
                marker_msg = Marker()
                marker_msg.ns = "appro_user"
                marker_msg.header.stamp = rospy.Time.now()
                marker_msg.header.frame_id = "base_link"
                marker_msg.type = marker_msg.SPHERE
                marker_msg.id = 0
                marker_msg.action = marker_msg.ADD
                marker_msg.pose = pose_user

                marker_msg.scale.x = 0.3
                marker_msg.scale.y = 0.3
                marker_msg.scale.z = 0.3

                marker_msg.color.r = 0.0
                marker_msg.color.g = 0.0
                marker_msg.color.b = 1.0
                marker_msg.color.a = 1.0



                marker_msg_body.markers.append(marker_msg)
                marker_msg.ns = "appro_user"
                marker_msg.type = marker_msg.ARROW
                marker_msg.id = 1
                marker_msg.action = marker_msg.ADD
                marker_msg.pose = pose_user
                marker_msg.header.stamp = rospy.Time.now()
                marker_msg.header.frame_id = "base_link" 


                marker_msg.scale.x = 0.4
                marker_msg.scale.y = 0.1
                marker_msg.scale.z = 0.1

                marker_msg.color.r = 0.0
                marker_msg.color.g = 1.0
                marker_msg.color.b = 0.0
                marker_msg.color.a = 1.0
                marker_msg.lifetime = rospy.Duration()
                marker_msg_body.markers.append(marker_msg)
                self._pub_people.publish(userarray_msg)
                ##self._pub_marker.publish(marker_msg_body)
                self._publish_flag = False
            r.sleep()

        rospy.signal_shutdown("Existing person converter")
        sys.exit(1)




if __name__ == '__main__':
    try:
        x = GenUsers()
        x.loop_converter()

    except rospy.ROSInterruptException: pass